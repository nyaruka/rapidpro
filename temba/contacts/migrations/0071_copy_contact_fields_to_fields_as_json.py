# -*- coding: utf-8 -*-
# Generated by Django 1.11.6 on 2018-01-18 10:10
from __future__ import unicode_literals, print_function, division

import time
import datetime

import pytz
from django.db import migrations, transaction, connection
from django.conf import settings


def copy_contact_fields_to_contact_model(qs):
    print('Total contacts for field serialization:', end='')
    total_contacts = qs.count()
    print(total_contacts)

    start_time = time.time()
    batch_start_time = time.time()

    with transaction.atomic():
        with connection.cursor() as cur:
            idx = 0
            for idx, contact in enumerate(qs.only('pk', 'org_id').iterator(), start=1):

                try:
                    cur.execute("""
                      UPDATE contacts_contact SET
                        field_values = es_update_contact.serialize_contact_fields(%s, %s)
                      WHERE id = %s;
                    """, (contact.org_id, contact.pk, contact.pk)
                    )
                except Exception as e:
                    print(contact.pk, contact.org_id)
                    print(str(e))

                BATCH_SIZE = 100
                if idx % BATCH_SIZE == 0:
                    time_per_contact = (time.time() - start_time) / idx

                    eta_time = datetime.datetime.fromtimestamp(
                        time.time() + (total_contacts - idx) * time_per_contact, tz=pytz.timezone(settings.TIME_ZONE)
                    ).isoformat()

                    print(
                        'Contacts:', idx, '/', total_contacts, '-- ETA:', eta_time,
                        '%.2f per second' % (BATCH_SIZE / (time.time() - batch_start_time))
                    )

                    batch_start_time = time.time()

            if idx > 0:
                print('Contacts:', idx, '/', total_contacts)


def apply_manual():
    from temba.contacts.models import Contact
    copy_contact_fields_to_contact_model(Contact.objects.order_by('id').all())


def apply_as_migration(apps, schema_editor):
    Contact = apps.get_model('contacts', 'Contact')
    copy_contact_fields_to_contact_model(Contact.objects.order_by('id').all())


class Migration(migrations.Migration):

    dependencies = [
        ('contacts', '0070_contact_fields_as_json'),
    ]

    operations = [
        migrations.RunSQL('CREATE SCHEMA IF NOT EXISTS es_update_contact;'),
        migrations.RunSQL("""
        CREATE OR REPLACE FUNCTION es_update_contact.serialize_contact_fields(i_org_id INTEGER, i_contact_id INTEGER)

  RETURNS text AS

$BODY$
  DECLARE
    v_query TEXT;
    v_field RECORD;

    q_cte_list text[];
    q_field_values text[];
    q_field_predicates text[];

    t_query text;
    t_result text;
  BEGIN

    IF i_org_id IS NULL OR i_contact_id IS NULL THEN
      return $${}$$;
    END IF;

    v_query := $query$select coalesce(row_to_json(row)::text, '{}') FROM (with $query$;

    -- read contact field definition for specified org
    t_query := format($$SELECT id, key, value_type FROM public.contacts_contactfield WHERE org_id = %L AND is_active = TRUE ORDER BY id$$, i_org_id);

    FOR v_field in execute t_query LOOP
      q_field_values := array_append(q_field_values, format($$%I.value AS %I$$, v_field.key, v_field.key));
      q_field_predicates := array_append(q_field_predicates, format($$%I ON contact.id = %I.contact_id$$, v_field.key, v_field.key));


      IF v_field.value_type = 'T' THEN
        q_cte_list := array_append(q_cte_list, format(
          $$%I AS (
          select contact_id, string_value as value
          from public.values_value
          WHERE org_id = %L AND contact_field_id = %L AND contact_id = %L
          ORDER BY 1,2)$$, v_field.key, i_org_id, v_field.id, i_contact_id
        ));
      ELSEIF v_field.value_type = 'N' THEN
        q_cte_list := array_append(q_cte_list, format(
          $$%I AS (
          select contact_id, decimal_value as value
          from public.values_value
          WHERE org_id = %L AND contact_field_id = %L AND contact_id = %L
          ORDER BY 1,2)$$, v_field.key, i_org_id, v_field.id, i_contact_id
        ));
        ELSEIF v_field.value_type = 'D' THEN
        q_cte_list := array_append(q_cte_list, format(
          $$%I AS (
          select contact_id, datetime_value as value
          from public.values_value
          WHERE org_id = %L AND contact_field_id = %L AND contact_id = %L
          ORDER BY 1,2)$$, v_field.key, i_org_id, v_field.id, i_contact_id
        ));
        ELSEIF v_field.value_type = any('{W, I, S}') THEN
        q_cte_list := array_append(q_cte_list, format(
          $$%I AS (
          select contact_id, path as value
          from public.values_value JOIN locations_adminboundary on values_value.location_value_id = locations_adminboundary.id
          WHERE org_id = %L AND contact_field_id = %L AND contact_id = %L
          ORDER BY 1,2)$$, v_field.key, i_org_id, v_field.id, i_contact_id
        ));
      END IF;
    END LOOP;

    IF NOT FOUND THEN
      -- RAISE NOTICE 'NOT FOUND %,%', i_org_id, i_contact_id;
      return $${}$$;
    END IF;

    v_query := v_query || array_to_string(q_cte_list, ', ');

    v_query := v_query || format($$
    select %s
$$, array_to_string(q_field_values, ', '));

    v_query := v_query || format($$
FROM contacts_contact as contact LEFT JOIN %s
WHERE contact.id = %L
ORDER BY id) as row$$, array_to_string(q_field_predicates, ' LEFT JOIN '), i_contact_id);


    -- RAISE NOTICE '%', v_query;
    EXECUTE v_query INTO t_result;

    IF t_result IS NULL THEN
      return $${}$$;
    END IF;

    return t_result;

  END;
  $BODY$
  LANGUAGE plpgsql STABLE;
        """),

        migrations.RunPython(apply_as_migration)

    ]
