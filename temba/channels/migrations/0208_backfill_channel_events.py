# Generated by Django 5.2.2 on 2025-08-26 19:48


from django.db import migrations
from django.db.models import Prefetch

from temba.utils import dynamo
from temba.utils.uuid import is_uuid7


def backfill_channel_events(apps, schema_editor):
    ChannelEvent = apps.get_model("channels", "ChannelEvent")
    Channel = apps.get_model("channels", "Channel")
    Contact = apps.get_model("contacts", "Contact")
    OptIn = apps.get_model("msgs", "OptIn")

    events = ChannelEvent.objects.filter(
        org__is_active=True,
        contact__is_active=True,
        event_type__in=("mo_miss", "new_conversation", "referral", "optin", "optout"),
    ).prefetch_related(
        Prefetch("channel", Channel.objects.only("uuid", "name")),
        Prefetch("contact", Contact.objects.only("uuid")),
        Prefetch("optin", OptIn.objects.only("uuid", "name")),
    )

    before_id = None
    num_written = 0

    while True:
        batch = events.order_by("-id")
        if before_id:
            batch = batch.filter(id__lt=before_id)

        batch = list(batch[:100])
        if not batch:
            break

        try:
            with dynamo.HISTORY.batch_writer() as writer:
                for evt in batch:
                    assert is_uuid7(evt.uuid)

                    channel_ref = {"uuid": str(evt.channel.uuid), "name": evt.channel.name}

                    if evt.event_type == "mo_miss":
                        data = {
                            "type": "call_missed",
                            "created_on": evt.created_on.isoformat(),
                            "channel": channel_ref,
                        }
                    elif evt.event_type == "new_conversation":
                        data = {
                            "type": "chat_started",
                            "created_on": evt.created_on.isoformat(),
                            "channel": channel_ref,
                        }
                    elif evt.event_type == "referral":
                        data = {
                            "type": "chat_started",
                            "created_on": evt.created_on.isoformat(),
                            "channel": channel_ref,
                            "params": evt.extra or {},
                        }
                    elif evt.event_type == "optin" and evt.created_on:
                        data = {
                            "type": "optin_started",
                            "created_on": evt.created_on.isoformat(),
                            "channel": channel_ref,
                            "optin": {"uuid": str(evt.optin.uuid), "name": evt.optin.name},
                        }
                    elif evt.event_type == "optout" and evt.created_on:
                        data = {
                            "type": "optin_stopped",
                            "created_on": evt.created_on.isoformat(),
                            "channel": channel_ref,
                            "optin": {"uuid": str(evt.optin.uuid), "name": evt.optin.name},
                        }
                    else:  # pragma: no cover
                        data = None

                    if data:
                        writer.put_item(
                            {
                                "PK": f"con#{evt.contact.uuid}",
                                "SK": f"evt#{evt.uuid}",
                                "OrgID": evt.org_id,
                                "Data": data,
                            }
                        )
                        num_written += 1

                    before_id = evt.id

        except Exception as e:  # pragma: no cover
            print(e)
            print(f"before_id={before_id}")
            break

        last_id, last_created_on = batch[-1].id, batch[-1].created_on

        print(f"Wrote {num_written} channel events (last id={last_id}, created_on={last_created_on.isoformat()})")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_channel_events(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("channels", "0207_squashed"),
    ]

    operations = [migrations.RunPython(backfill_channel_events, reverse_code=migrations.RunPython.noop)]
