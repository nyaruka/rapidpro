# Generated by Django 2.2.10 on 2021-01-20 18:59

from django.db import migrations
from django.db.models import Count


def populate_flow_start_filter_counts(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    FlowStart = apps.get_model("flows", "FlowStart")
    FlowStartTypeCount = apps.get_model("flows", "FlowStartTypeCount")

    orgs = Org.objects.all()
    for org in orgs:

        type_counts = (
            FlowStart.objects.filter(org=org)
            .values("start_type")
            .annotate(type_count=Count("start_type"))
            .order_by("-type_count", "start_type")
        )

        for t_count in type_counts:
            if t_count["type_count"] > 0:
                FlowStartTypeCount.objects.create(
                    org=org, start_type=t_count["start_type"], count=t_count["type_count"]
                )


def noop(apps, schema_editor):  # pragma: no cover
    pass


# language=SQL
TRIGGER_SQL = """
---------------------------------------------------------------------------------
-- Increment or decrement a flow start by start type count
---------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION
  temba_insert_flow_start_type_count(_org_id INT, _start_type CHAR(1), _count INT)
RETURNS VOID AS $$
BEGIN
  INSERT INTO flows_flowstarttypecount("org_id", "start_type", "count", "is_squashed")
  VALUES(_org_id, _start_type, _count, FALSE);
END;
$$ LANGUAGE plpgsql;

-----------------------------------------------------------------------
--- Trigger procedure to maintain flow start by start type counts
-----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_flow_starts_on_change() RETURNS TRIGGER AS $$
BEGIN
  -- flow start created
  IF TG_OP = 'INSERT' THEN
    PERFORM temba_insert_flow_start_type_count(NEW.org_id, NEW.start_type, 1);

  -- flow start deleted
  ELSIF TG_OP = 'DELETE' THEN
    PERFORM temba_insert_flow_start_type_count(OLD.org_id, OLD.start_type, -1);
  END IF;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER temba_when_flowstart_changed_then_update_flowstarttypecount_trg
   AFTER INSERT OR DELETE ON flows_flowstart
   FOR EACH ROW EXECUTE PROCEDURE temba_flow_starts_on_change();

"""


class Migration(migrations.Migration):

    dependencies = [
        ("flows", "0247_flowstarttypecount"),
    ]

    operations = [migrations.RunPython(populate_flow_start_filter_counts, noop), migrations.RunSQL(TRIGGER_SQL, "")]
