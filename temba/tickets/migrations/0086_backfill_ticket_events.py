# Generated by Django 5.2.2 on 2025-09-12 16:00

from django.db import migrations
from django.db.models import Prefetch

from temba.utils import dynamo
from temba.utils.uuid import is_uuid7

TYPE_OPENED = "O"
TYPE_ASSIGNED = "A"
TYPE_NOTE_ADDED = "N"
TYPE_TOPIC_CHANGED = "T"
TYPE_CLOSED = "C"
TYPE_REOPENED = "R"


def backfill_ticket_events(apps, schema_editor):
    TicketEvent = apps.get_model("tickets", "TicketEvent")
    Ticket = apps.get_model("tickets", "Ticket")
    Topic = apps.get_model("tickets", "Topic")
    User = apps.get_model("users", "User")
    Contact = apps.get_model("contacts", "Contact")

    events = TicketEvent.objects.filter(org__is_active=True, contact__is_active=True).prefetch_related(
        Prefetch("contact", Contact.objects.only("uuid")),
        Prefetch("ticket", Ticket.objects.only("uuid", "topic", "assignee")),
        Prefetch("ticket__topic", Topic.objects.only("uuid", "name")),
        Prefetch("topic", Topic.objects.only("uuid", "name")),
        Prefetch("assignee", User.objects.only("uuid", "first_name", "last_name")),
        Prefetch("created_by", User.objects.only("uuid", "first_name", "last_name")),
    )

    before_id = None
    num_written = 0

    while True:
        batch = events.order_by("-id")
        if before_id:
            batch = batch.filter(id__lt=before_id)

        batch = list(batch[:100])
        if not batch:
            break

        try:
            with dynamo.HISTORY.batch_writer() as writer:
                for evt in batch:
                    assert is_uuid7(evt.uuid)

                    if evt.event_type == TYPE_OPENED:
                        data = {
                            "type": "ticket_opened",
                            "created_on": evt.created_on.isoformat(),
                            "ticket": {
                                "uuid": str(evt.ticket.uuid),
                                "status": "open",
                                "topic": _topic_ref(evt.topic if evt.topic else evt.ticket.topic),
                                "assignee": _user_ref(evt.assignee) if evt.assignee else None,
                            },
                        }
                        if evt.note:
                            data["note"] = evt.note

                    elif evt.event_type == TYPE_ASSIGNED:
                        data = {
                            "type": "ticket_assignee_changed",
                            "created_on": evt.created_on.isoformat(),
                            "ticket_uuid": str(evt.ticket.uuid),
                            "assignee": _user_ref(evt.assignee) if evt.assignee else None,
                        }
                    elif evt.event_type == TYPE_NOTE_ADDED:
                        data = {
                            "type": "ticket_note_added",
                            "created_on": evt.created_on.isoformat(),
                            "ticket_uuid": str(evt.ticket.uuid),
                            "note": evt.note,
                        }
                    elif evt.event_type == TYPE_TOPIC_CHANGED:
                        data = {
                            "type": "ticket_topic_changed",
                            "created_on": evt.created_on.isoformat(),
                            "ticket_uuid": str(evt.ticket.uuid),
                            "topic": _topic_ref(evt.topic),
                        }
                    elif evt.event_type == TYPE_CLOSED:
                        data = {
                            "type": "ticket_closed",
                            "created_on": evt.created_on.isoformat(),
                            "ticket_uuid": str(evt.ticket.uuid),
                        }
                    elif evt.event_type == TYPE_REOPENED:
                        data = {
                            "type": "ticket_reopened",
                            "created_on": evt.created_on.isoformat(),
                            "ticket_uuid": str(evt.ticket.uuid),
                        }
                    else:  # pragma: no cover
                        data = None

                    if evt.created_by:
                        data["_user_uuid"] = str(evt.created_by.uuid)

                    if data:
                        writer.put_item(
                            {
                                "PK": f"con#{evt.contact.uuid}",
                                "SK": f"evt#{evt.uuid}",
                                "OrgID": evt.org_id,
                                "Data": data,
                            }
                        )
                        num_written += 1

                    before_id = evt.id

        except Exception as e:  # pragma: no cover
            print(e)
            print(f"before_id={before_id}")
            break

        last_id, last_created_on = batch[-1].id, batch[-1].created_on

        print(f"Wrote {num_written} ticket events (last id={last_id}, created_on={last_created_on.isoformat()})")


def _user_ref(user) -> dict:
    return {"uuid": str(user.uuid), "name": f"{user.first_name} {user.last_name}".strip()}


def _topic_ref(topic) -> dict:
    return {"uuid": str(topic.uuid), "name": topic.name}


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_ticket_events(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("tickets", "0085_remove_ticket_tickets_contact_open_and_more"),
    ]

    operations = [
        migrations.RunPython(backfill_ticket_events, migrations.RunPython.noop),
    ]
