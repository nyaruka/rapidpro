# Generated by Django 5.2.2 on 2025-08-25 16:58

from datetime import datetime, timezone as tzone

from django.db import migrations
from django.db.models import Prefetch

from temba.utils import dynamo
from temba.utils.uuid import uuid7

# TODO remove
migrate_before = datetime(2025, 8, 25, 20, 0, 0, 0, tzinfo=tzone.utc)


def backfill_call_events(apps, schema_editor):
    Call = apps.get_model("ivr", "Call")
    Channel = apps.get_model("channels", "Channel")
    Contact = apps.get_model("contacts", "Contact")
    ContactURN = apps.get_model("contacts", "ContactURN")

    calls = Call.objects.filter(
        org__is_active=True, contact__is_active=True, created_on__lt=migrate_before
    ).prefetch_related(
        Prefetch("channel", Channel.objects.only("uuid", "name")),
        Prefetch("contact", Contact.objects.only("uuid")),
        Prefetch("contact_urn", ContactURN.objects.only("identity")),
    )

    before_id = None
    num_written = 0

    while True:
        batch = calls.order_by("-id")
        if before_id:
            batch = batch.filter(id__lt=before_id)

        batch = list(batch[:100])
        if not batch:
            break

        try:
            with dynamo.HISTORY.batch_writer() as writer:
                for call in batch:
                    writer.put_item(
                        {
                            "PK": f"con#{call.contact.uuid}",
                            "SK": f"evt#{uuid7(call.created_on)}",
                            "OrgID": call.org_id,
                            "Data": {
                                "type": "call_received" if call.direction == "I" else "call_created",
                                "created_on": call.created_on.isoformat(),
                                "call": {
                                    "uuid": str(call.uuid),
                                    "urn": call.contact_urn.identity,
                                    "channel": {"uuid": str(call.channel.uuid), "name": call.channel.name},
                                },
                            },
                        }
                    )
                    num_written += 1

                    before_id = call.id

        except Exception as e:  # pragma: no cover
            print(e)
            print(f"before_id={before_id}")
            break

        last_id, last_created_on = batch[-1].id, batch[-1].created_on

        print(f"Wrote {num_written} call events (last id={last_id}, created_on={last_created_on.isoformat()})")


def apply_manual():  # pragma: no cover
    from django.apps import apps

    backfill_call_events(apps, None)


class Migration(migrations.Migration):

    dependencies = [
        ("ivr", "0038_alter_call_uuid"),
    ]

    operations = [
        migrations.RunPython(backfill_call_events, reverse_code=migrations.RunPython.noop),
    ]
