# Generated by Django 4.1.9 on 2023-06-22 10:17

from django.db import migrations

SQL = """
----------------------------------------------------------------------
-- Handles INSERT statements on msgs_msg_labels table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_labels_on_insert() RETURNS TRIGGER AS $$
BEGIN
    -- add label count for all new rows
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT n.label_id, m.visibility != 'V', count(*), FALSE FROM newtab n
    INNER JOIN msgs_msg m ON m.id = n.msg_id
    GROUP BY n.label_id, m.visibility != 'V';

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles DELETE statements on msgs_msg_labels table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_labels_on_delete() RETURNS TRIGGER AS $$
BEGIN
    -- add negative label count for all deleted rows
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT o.label_id, m.visibility != 'V', -count(*), FALSE FROM oldtab o
    INNER JOIN msgs_msg m ON m.id = o.msg_id
    GROUP BY o.label_id, m.visibility != 'V';

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Handles UPDATE statements on msg table
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_on_update() RETURNS TRIGGER AS $$
BEGIN
    -- add negative counts for all old non-null system labels that don't match the new ones
    INSERT INTO msgs_systemlabelcount("org_id", "label_type", "count", "is_squashed")
    SELECT o.org_id, temba_msg_determine_system_label(o), -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    WHERE temba_msg_determine_system_label(o) IS DISTINCT FROM temba_msg_determine_system_label(n) AND temba_msg_determine_system_label(o) IS NOT NULL
    GROUP BY o.org_id, temba_msg_determine_system_label(o);

    -- add counts for all new system labels that don't match the old ones
    INSERT INTO msgs_systemlabelcount("org_id", "label_type", "count", "is_squashed")
    SELECT n.org_id, temba_msg_determine_system_label(n), count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    WHERE temba_msg_determine_system_label(o) IS DISTINCT FROM temba_msg_determine_system_label(n) AND temba_msg_determine_system_label(n) IS NOT NULL
    GROUP BY n.org_id, temba_msg_determine_system_label(n);

    -- add negative old-state label counts for all messages being archived/restored
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT ml.label_id, o.visibility != 'V', -count(*), FALSE FROM oldtab o
    INNER JOIN newtab n ON n.id = o.id
    INNER JOIN msgs_msg_labels ml ON ml.msg_id = o.id
    WHERE (o.visibility = 'V' AND n.visibility != 'V') or (o.visibility != 'V' AND n.visibility = 'V')
    GROUP BY ml.label_id, o.visibility != 'V';

    -- add new-state label counts for all messages being archived/restored
    INSERT INTO msgs_labelcount("label_id", "is_archived", "count", "is_squashed")
    SELECT ml.label_id, n.visibility != 'V', count(*), FALSE FROM newtab n
    INNER JOIN oldtab o ON o.id = n.id
    INNER JOIN msgs_msg_labels ml ON ml.msg_id = n.id
    WHERE (o.visibility = 'V' AND n.visibility != 'V') or (o.visibility != 'V' AND n.visibility = 'V')
    GROUP BY ml.label_id, n.visibility != 'V';

    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

----------------------------------------------------------------------
-- Trigger procedure to update user and system labels on column changes
----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION temba_msg_on_change() RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP IN ('INSERT', 'UPDATE') THEN
    -- prevent illegal message states
    IF NEW.direction = 'I' AND NEW.status NOT IN ('P', 'H') THEN
      RAISE EXCEPTION 'Incoming messages can only be PENDING or HANDLED';
    END IF;
    IF NEW.direction = 'O' AND NEW.visibility = 'A' THEN
      RAISE EXCEPTION 'Outgoing messages cannot be archived';
    END IF;
  END IF;

  -- existing message updated
  IF TG_OP = 'UPDATE' THEN
    -- restrict changes
    IF NEW.direction <> OLD.direction THEN RAISE EXCEPTION 'Cannot change direction on messages'; END IF;
    IF NEW.created_on <> OLD.created_on THEN RAISE EXCEPTION 'Cannot change created_on on messages'; END IF;
    IF NEW.msg_type <> OLD.msg_type THEN RAISE EXCEPTION 'Cannot change msg_type on messages'; END IF;
  END IF;

  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER temba_msg_labels_on_insert
AFTER INSERT ON msgs_msg_labels REFERENCING NEW TABLE AS newtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_msg_labels_on_insert();

CREATE TRIGGER temba_msg_labels_on_delete
AFTER DELETE ON msgs_msg_labels REFERENCING OLD TABLE AS oldtab
FOR EACH STATEMENT EXECUTE PROCEDURE temba_msg_labels_on_delete();

DROP TRIGGER temba_msg_labels_on_change_trg ON msgs_msg_labels;
DROP FUNCTION temba_msg_labels_on_change();
DROP FUNCTION temba_insert_label_count(INT, INT);
DROP FUNCTION temba_insert_message_label_counts(BIGINT, BOOLEAN, INT);
"""


class Migration(migrations.Migration):
    dependencies = [("msgs", "0241_update_db_triggers")]

    operations = [migrations.RunSQL(SQL)]
