# Generated by Django 4.2.2 on 2023-07-05 18:27

from django.db import migrations, transaction
from django.db.models import Sum


def fix_archived_label_counts(apps, schema_editor):  # pragma: no cover
    Org = apps.get_model("orgs", "Org")
    Label = apps.get_model("msgs", "Label")

    for org in Org.objects.filter(is_active=True):
        num_archived_msgs = org.system_labels.filter(label_type="A").aggregate(total=Sum("count"))["total"] or 0

        # skip orgs with no archived messages
        if not num_archived_msgs:
            continue

        for label in Label.objects.filter(org=org, is_active=True):
            archived_count = label.counts.filter(is_archived=True).aggregate(total=Sum("count"))["total"] or 0
            actual_count = label.msgs.filter(visibility="A").count()

            if archived_count != actual_count:
                with transaction.atomic():
                    label.counts.filter(is_archived=True).delete()
                    label.counts.create(is_archived=True, count=actual_count, is_squashed=True)

                print(f"Fixed archived message count for label #{label.id} {archived_count} => {actual_count}")


def reverse(apps, schema_editor):  # pragma: no cover
    pass


def apply_manual():  # pragma: no cover
    from django.apps import apps

    fix_archived_label_counts(apps, None)


class Migration(migrations.Migration):
    dependencies = [("msgs", "0242_update_db_triggers")]

    operations = [migrations.RunPython(fix_archived_label_counts, reverse)]
