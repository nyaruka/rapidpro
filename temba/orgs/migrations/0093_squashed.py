# Generated by Django 4.0.3 on 2022-03-10 17:56

import pyotp
import timezone_field.fields

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import temba.utils.json
import temba.utils.models
import temba.utils.text
import temba.utils.uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("locations", "0024_squashed"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Org",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("uuid", models.UUIDField(default=temba.utils.uuid.uuid4, unique=True)),
                ("name", models.CharField(max_length=128, verbose_name="Name")),
                (
                    "plan",
                    models.CharField(
                        default="topups",
                        help_text="What plan your organization is on",
                        max_length=16,
                        verbose_name="Plan",
                    ),
                ),
                ("plan_start", models.DateTimeField(null=True)),
                ("plan_end", models.DateTimeField(null=True)),
                (
                    "stripe_customer",
                    models.CharField(
                        blank=True,
                        help_text="Our Stripe customer id for your organization",
                        max_length=32,
                        null=True,
                        verbose_name="Stripe Customer",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en-us", "English"),
                            ("cs", "Czech"),
                            ("es", "Spanish"),
                            ("fr", "French"),
                            ("mn", "Mongolian"),
                            ("pt-br", "Portuguese"),
                            ("ru", "Russian"),
                        ],
                        default="en-us",
                        help_text="The default website language for new users.",
                        max_length=64,
                        null=True,
                        verbose_name="Default Language",
                    ),
                ),
                ("timezone", timezone_field.fields.TimeZoneField(verbose_name="Timezone")),
                (
                    "date_format",
                    models.CharField(
                        choices=[("D", "DD-MM-YYYY"), ("M", "MM-DD-YYYY"), ("Y", "YYYY-MM-DD")],
                        default="D",
                        help_text="Whether day comes first or month comes first in dates",
                        max_length=1,
                        verbose_name="Date Format",
                    ),
                ),
                (
                    "config",
                    temba.utils.models.JSONAsTextField(
                        default=dict,
                        help_text="More Organization specific configuration",
                        null=True,
                        verbose_name="Configuration",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        blank=True,
                        error_messages={"unique": "This slug is not available"},
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Slug",
                    ),
                ),
                (
                    "limits",
                    temba.utils.models.JSONField(
                        decoder=temba.utils.json.TembaDecoder, default=dict, encoder=temba.utils.json.TembaEncoder
                    ),
                ),
                (
                    "api_rates",
                    temba.utils.models.JSONField(
                        decoder=temba.utils.json.TembaDecoder, default=dict, encoder=temba.utils.json.TembaEncoder
                    ),
                ),
                (
                    "is_anon",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this organization anonymizes the phone numbers of contacts within it",
                    ),
                ),
                (
                    "is_flagged",
                    models.BooleanField(default=False, help_text="Whether this organization is currently flagged."),
                ),
                (
                    "is_suspended",
                    models.BooleanField(default=False, help_text="Whether this organization is currently suspended."),
                ),
                ("uses_topups", models.BooleanField(default=True, help_text="Whether this organization uses topups.")),
                (
                    "is_multi_org",
                    models.BooleanField(
                        default=False, help_text="Whether this organization can have child workspaces"
                    ),
                ),
                (
                    "is_multi_user",
                    models.BooleanField(default=False, help_text="Whether this organization can have multiple logins"),
                ),
                (
                    "flow_languages",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=3), default=list, size=None
                    ),
                ),
                (
                    "brand",
                    models.CharField(
                        default="rapidpro.io",
                        help_text="The brand used in emails",
                        max_length=128,
                        verbose_name="Brand",
                    ),
                ),
                (
                    "surveyor_password",
                    models.CharField(
                        default=None,
                        help_text="A password that allows users to register as surveyors",
                        max_length=128,
                        null=True,
                    ),
                ),
                ("released_on", models.DateTimeField(null=True)),
                ("deleted_on", models.DateTimeField(null=True)),
                ("administrators", models.ManyToManyField(related_name="org_admins", to=settings.AUTH_USER_MODEL)),
                ("agents", models.ManyToManyField(related_name="org_agents", to=settings.AUTH_USER_MODEL)),
                (
                    "country",
                    models.ForeignKey(
                        blank=True,
                        help_text="The country this organization should map results for.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="locations.adminboundary",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("editors", models.ManyToManyField(related_name="org_editors", to=settings.AUTH_USER_MODEL)),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="The parent org that manages this org",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="orgs.org",
                    ),
                ),
                ("surveyors", models.ManyToManyField(related_name="org_surveyors", to=settings.AUTH_USER_MODEL)),
                ("viewers", models.ManyToManyField(related_name="org_viewers", to=settings.AUTH_USER_MODEL)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TopUp",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "price",
                    models.IntegerField(
                        blank=True,
                        help_text="The price paid for the messages in this top up (in cents)",
                        null=True,
                        verbose_name="Price Paid",
                    ),
                ),
                (
                    "credits",
                    models.IntegerField(
                        help_text="The number of credits bought in this top up", verbose_name="Number of Credits"
                    ),
                ),
                (
                    "expires_on",
                    models.DateTimeField(
                        help_text="The date that this top up will expire", verbose_name="Expiration Date"
                    ),
                ),
                (
                    "stripe_charge",
                    models.CharField(
                        blank=True,
                        help_text="The Stripe charge id for this charge",
                        max_length=32,
                        null=True,
                        verbose_name="Stripe Charge Id",
                    ),
                ),
                (
                    "comment",
                    models.CharField(
                        blank=True,
                        help_text="Any comment associated with this topup, used when we credit accounts",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The organization that was toppped up",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="topups",
                        to="orgs.org",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="UserSettings",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en-us", "English"),
                            ("cs", "Czech"),
                            ("es", "Spanish"),
                            ("fr", "French"),
                            ("mn", "Mongolian"),
                            ("pt-br", "Portuguese"),
                            ("ru", "Russian"),
                        ],
                        default="en-us",
                        max_length=8,
                    ),
                ),
                ("otp_secret", models.CharField(default=pyotp.random_base32, max_length=16)),
                ("two_factor_enabled", models.BooleanField(default=False)),
                ("last_auth_on", models.DateTimeField(null=True)),
                ("external_id", models.CharField(max_length=128, null=True)),
                ("verification_token", models.CharField(max_length=64, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="settings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TopUpCredits",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False)),
                ("is_squashed", models.BooleanField(default=False)),
                ("used", models.IntegerField()),
                ("topup", models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to="orgs.topup")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("secret", models.CharField(max_length=64, unique=True)),
                (
                    "user_group",
                    models.CharField(
                        choices=[
                            ("A", "Administrator"),
                            ("E", "Editor"),
                            ("V", "Viewer"),
                            ("T", "Agent"),
                            ("S", "Surveyor"),
                        ],
                        default="V",
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="invitations", to="orgs.org"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Debit",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("amount", models.IntegerField(help_text="How many credits were debited")),
                (
                    "debit_type",
                    models.CharField(choices=[("A", "Allocation")], help_text="What caused this debit", max_length=1),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When this item was originally created"
                    ),
                ),
                (
                    "beneficiary",
                    models.ForeignKey(
                        help_text="Optional topup that was allocated with these credits",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="allocations",
                        to="orgs.topup",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="debits_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "topup",
                    models.ForeignKey(
                        help_text="The topup these credits are applied against",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="debits",
                        to="orgs.topup",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="CreditAlert",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "alert_type",
                    models.CharField(
                        choices=[("O", "Credits Over"), ("L", "Low Credits"), ("E", "Credits expiring soon")],
                        max_length=1,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="%(app_label)s_%(class)s_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="credit_alerts", to="orgs.org"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="BackupToken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(default=temba.utils.text.generate_token, max_length=18, unique=True)),
                ("is_used", models.BooleanField(default=False)),
                ("created_on", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="backup_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrgActivity",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("day", models.DateField()),
                ("contact_count", models.IntegerField(default=0)),
                ("active_contact_count", models.IntegerField(default=0)),
                ("outgoing_count", models.IntegerField(default=0)),
                ("incoming_count", models.IntegerField(default=0)),
                ("plan_active_contact_count", models.IntegerField(null=True)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, related_name="contact_activity", to="orgs.org"
                    ),
                ),
            ],
            options={
                "unique_together": {("org", "day")},
            },
        ),
    ]
