-extends "smartmin/list.html"
-load smartmin sms contacts temba i18n humanize

-block page-title
  -if current_group
    {{current_group.name}}
  -else
    {{title}}

-block spa-title
  #title-text
    {{title}}

-block page-top

-block title-icon
  %span.title-icon
    .glyph.icon-users

-block extra-style
   {{block.super}}
   :css
    tr.contacts th a span.icon {
      visibility: hidden;
      text-decoration: none;
      font-size: 14px;
      margin-top: -1px;
    }

    tr.contacts th a {
      text-decoration: none;
      font-weight:500;
      color: #717171;
      font-size: 0.75rem;
    }

    .span9 .contact_list tr.contacts {
      border-top: none;
    }

    .span9 .object-list tbody td.value-text {
      min-width: 30px;
    }

    .modal .modal-body .control-group .control-label {
      display:none;
    }

    .search-error {
      color: #da4f49;
    }

    .pagination-notification {
      background: #ecf0f1;
      padding: 10px;
    }

    table {
      text-align: left;
      position: relative;
      border-collapse: collapse;
    }
    th, td {
      padding: 0.25rem;
    }

    temba-icon.sorting {
      display: inline-block;
      opacity: 0;
    }
    
    temba-icon.sorting.show {
      opacity: 1;
    }

-block content
  .flex
    .flex-grow.self-end.items-end
      .flex.flex-col
        %form#search-form(method="get" action="{{request.path}}")
          %temba-textinput.w-full(placeholder='{% trans "Search" %}' name="search" value="{{search}}")
          %input.hide(type="submit")

  -if org_perms.contacts.contact_delete
    %temba-dialog#delete-confirmation.hide(header='{{ _("Delete Selected Contacts")|escapejs }}' primaryButtonName='{{ _("Delete")|escapejs }}' destructive='true')          
      .p-6
        -trans "Are you sure you want to delete the selected contacts? This cannot be undone."

    %temba-dialog#delete-all-confirmation.hide(header='{{ _("Delete All Contacts")|escapejs }}' primaryButtonName='{{ _("Delete")|escapejs }}' destructive='true')
      .p-6
        -blocktrans trimmed with count=paginator.count
          Are you sure you want to delete all {{ count }} archived contacts? This cannot be undone.

        -if paginator.count > 50
          %br
          %br
          -blocktrans trimmed
            This operation can take a while to complete. Contacts may remain in this view during the process.

  %temba-modax#create-group-modal(header='{% trans "Create Group" %}' endpoint="{% url 'contacts.contactgroup_create' %}" -temba-loaded="handleCreateGroupModalLoaded")

  .mt-4.shadow.rounded-lg.rounded-bl-none.rounded-br-none.bg-white
    -include "includes/short_pagination.haml"
    -if paginator.is_es_search and not page_obj.has_next_page and page_obj.number == paginator.num_pages and paginator.count > 10000
      .text-gray-400.text-sm.self-end.mt-2
        -trans "To view more than 10,000 search results, save it as a group."

  .flex-grow.shadow.overflow-y-auto
    %table.relative.list.object-list.lined.selectable.scrolled.sticky
      %tbody
        - if object_list
          %tr.contacts
            -if org_perms.contacts.contact_update
              %th.z-10
            %th
            %th
            -for field in contact_fields
              -if field.show_in_table
                %th
                  -if sort_field == field.key
                    -if sort_direction == 'desc'
                      %a(href="{{request.path}}?sort_on={{ field.key }}{% if search %}&search={{ search|escape }}{% endif %}")
                        %div
                          {{ field.name }}
                          %temba-icon.sorting.show(name="sort_down")
                    -else
                      %a(href="{{request.path}}?sort_on=-{{ field.key }}{% if search %}&search={{ search|escape }}{% endif %}")
                        %div
                          {{ field.name }}
                          %temba-icon.sorting.show(name="sort_up")
                  -else
                    %a(href="{{request.path}}?sort_on=-{{ field.key }}{% if search %}&search={{ search|escape }}{% endif %}")
                      %div
                        {{ field.name }}
                        %temba-icon.sorting(name="sort_down")
            %th.px-6.py-3.pt-4.border-b.border-gray-200.bg-gray-100.text-left.font-medium.uppercase.text-xs.tracking-wider
              - if object_list
                -if sort_field == 'last_seen_on'
                  -if sort_direction == 'desc'
                    %a(href="{{request.path}}?sort_on=last_seen_on{% if search %}&search={{ search|escape }}{% endif %}")
                      %div
                        -trans "Last Seen On"
                        %temba-icon.sorting(name="sort_down")
                  -else
                    %a(href="{{request.path}}?sort_on=-last_seen_on{% if search %}&search={{ search|escape }}{% endif %}")
                      %div
                        -trans "Last Seen On"
                        %temba-icon.sorting(name="sort_up")
                -else
                  %a(href="{{request.path}}?sort_on=-last_seen_on{% if search %}&search={{ search|escape }}{% endif %}")
                    %div
                      -trans "Last Seen On"
                      %temba-icon.sorting(name="sort_down")

            %th.px-6.py-3.pt-4.border-b.border-gray-200.bg-gray-100.text-left.font-medium.uppercase.text-xs.tracking-wider
              -if object_list
                -if sort_field == 'created_on'
                  -if sort_direction == 'desc'
                    %a(href="{{request.path}}?sort_on=created_on{% if search %}&search={{ search|escape }}{% endif %}")
                      %div
                        -trans "Created On"
                        %temba-icon.sorting(name="sort_down")
                  -else
                    %a(href="{{request.path}}?sort_on=-created_on{% if search %}&search={{ search|escape }}{% endif %}")
                      %div
                        -trans "Created On"
                        %temba-icon.sorting(name="sort_up")
                -else
                  %a(href="{{request.path}}?sort_on=-created_on{% if search %}&search={{ search|escape }}{% endif %}")
                    %div
                      -trans "Created On"
                      %temba-icon.sorting(name="sort_down")
          -for object in contacts
            %tr.contact.select-row.object-row(onclick='handleRowClicked(event)' data-uuid="{{object.uuid}}" data-object-id="{{object.id}}" href="{% url 'contacts.contact_read' object.uuid %}")

              -if org_perms.contacts.contact_update or org_perms.msgs.broadcast_send
                %td.contact.checkbox.object-row-checkbox(onclick="checkInner(event);")
                  %temba-checkbox(onclick="handleRowSelection(this)")

              %td
                .whitespace-nowrap
                  {{ object|name:user_org }}

              %td.w-full
                .whitespace-nowrap
                  {{ object|urn:user_org }}

              -for field in contact_fields
                -if field.show_in_table
                  %td.field.truncate(style="max-width:240px")
                    {% contact_field object field.key %}

              %td.value-received.field_received
                .whitespace-nowrap
                  -if object.last_seen_on
                    %temba-date(value="{{object.last_seen_on.isoformat}}" display="date")
                  -else
                    {{ "--" }}
              %td.value-received.field_received
                .whitespace-nowrap
                  %temba-date(value="{{object.created_on.isoformat}}" display="date")

              // This is needed for action buttons
              %td.hide
                .value-labels
                  %nobr
                    -for group in object.all_groups.all
                      -if group.group_type == 'U'
                        %span.label.label-info.lbl(data-id="{{group.id}}")
                          %a(href="{% url 'contacts.contact_filter' group.uuid %}")
                            {{group.name}}

          -empty
            %tr.empty_list
              %td(colspan="99")
                -trans "No matching contacts."

              -for field in contact_fields
                -if field.show_in_table
                  %td.field
              %td
              


-block extra-script
  {{ block.super }}

  :javascript

    {% if org_perms.contacts.contact_delete %}
      function onDeleteClicked(){
        var deleteConfirmation = document.querySelector("#delete-confirmation");
        deleteConfirmation.classList.remove("hide");
        deleteConfirmation.open = true;

        deleteConfirmation.addEventListener("temba-button-clicked", function(event){
          if (!event.detail.button.secondary) {
            runActionOnObjectRows("delete", wireTableListeners);
          }
          deleteConfirmation.open = false;
        });
      }
    {% endif %}

    function handleRowClicked(event) {
      if (event.target.tagName == "TEMBA-CHECKBOX") {
        return;
      }

      var row = event.target.closest("tr");
      var uuid = row.getAttribute("data-uuid");

      goto(event, row);
    }

    function handleStartFlowClicked(evt) {

      var sendEndpoint = "{% url 'flows.flow_broadcast' %}";
      var startModal = getModax("#start-modal");

      startModal.header = '{{_("Start Flow")|escapejs}}';
      var ids = getCheckedUuids();
      if (ids.length > 0) {
        startModal.setAttribute("endpoint", sendEndpoint + '?c=' + ids);
      } else {
        startModal.setAttribute("endpoint", sendEndpoint);
      }
      startModal.open = true;

      evt.preventDefault();
      evt.stopPropagation();
    }

    function handleSendMessageClicked() {
      // when we click send, include any clicked messages in our modax request
      var sendEndpoint = "{% url 'msgs.broadcast_send' %}";
      var sendModal = document.querySelector("#send-message-modal");
      var ids = getCheckedUuids();
      if (ids.length > 0) {
        sendModal.setAttribute("endpoint", sendEndpoint + '?c=' + ids);
      } else {
        sendModal.setAttribute("endpoint", sendEndpoint);
      }
    }

    // keeps track if we are on a link or not
    var onLink = false;

    {% if org_perms.contacts.contact_update %}
    function addContactToGroup(groupId){
      window.lastChecked = getCheckedIds();
      var groupedIds = getLabeledIds(groupId);

      var addGroup = true;

      // find the intersection of contactIds and groupedIds
      var contactIdsWithGroup = intersect(window.lastChecked, groupedIds);

      // they all belong to the group, so we are actually removing these contacts from the group
      if (contactIdsWithGroup.length == window.lastChecked.length){
        addGroup = false;
      }
      jQuery.ajaxSettings.traditional = true;
      fetchPJAXContent(document.location.href, "#pjax", { postData: {objects: window.lastChecked, label: groupId, add: addGroup, action: 'label', pjax: 'true'}, forceReload: true, onSuccess: function(){ recheckIds(); wireTableListeners()}});
    }
    {% endif %}

    {% if org_perms.contacts.contact_block %}
      $(".lp-frame").on('click', ".object-btn-unblock", function() {
        runActionOnObjectRows("unblock", wireTableListeners);
      });
      $(".lp-frame").on('click', ".object-btn-block", function() {
        runActionOnObjectRows("block", wireTableListeners);
      });
    {% endif %}

    {% if org_perms.contacts.contact_unstop %}
      $(".lp-frame").on('click', ".object-btn-unstop", function() {
        runActionOnObjectRows("unstop", wireTableListeners);
      });
    {% endif %}

    function handleCreateGroupModalLoaded(event) {
      window.lastChecked = getCheckedIds();
      var body = event.detail.body;
      body.querySelector("#id_preselected_contacts").value = window.lastChecked.join();
    }

    function handleCreateGroupModalSubmitted(event) {
      refresh(function() { recheckIds(); }, true);
    }

    function handleAddGroupClicked() {
      document.getElementById("create-group-modal").open = true;
    }

    {% if org_perms.contacts.contact_delete %}

    function handleDeleteAllConfirmation() {
      var deleteAllConfirmation = document.querySelector('#delete-all-confirmation');

      deleteAllConfirmation.classList.remove("hide");
      deleteAllConfirmation.open = true;

      deleteAllConfirmation.removeEventListener("temba-button-clicked", handleDeleteAllContacts);
      deleteAllConfirmation.addEventListener("temba-button-clicked", handleDeleteAllContacts);
    }

    function handleDeleteAllContacts(event){
      var deleteAllConfirmation = document.querySelector('#delete-all-confirmation');

      if (event.detail.button.attributes.destructive){
        jQuery.ajaxSettings.traditional = true;
        var url = "{% url 'contacts.contact_archived' %}";

        var store = document.querySelector("temba-store");
        store.postForm(url, { action: "delete", all: 'true', pjax: true}).then(function(response){
          document.querySelector("temba-menu").refresh();
          gotoURL(url);
        }).catch(function(error){
          console.log(error);
        });

      }
      deleteAllConfirmation.classList.add("hide");
      deleteAllConfirmation.open = false;
    }

    {% endif %}
