-extends "smartmin/list.html"
-load smartmin sms temba compress contacts i18n humanize channels

-block extra-style
  {{block.super}}
  :css
    temba-button {
      display: block;
    }

-block page-title
  {{title}}

-block title-icon
  %span.title-icon
    .glyph.icon-inbox

-block content

  %temba-modax#create-label-modal{ header:'{% trans "Create Label" %}', endpoint:"{% url 'msgs.label_create' %}", "-temba-loaded": "handleCreateLabelModalLoaded", "-temba-submitted": "handleCreateLabelModalSubmitted"}

  .flex
    .flex-grow.self-end.items-end
      .flex.flex-col
        %form#search-form(method="get")
          %temba-textinput.w-full(placeholder='{% trans "Search" %}' name="search" value="{{search}}")
          %input.hidden(type="submit" value="Submit")


  .mt-4.shadow.rounded-lg.rounded-bl-none.rounded-br-none.bg-white
    -include "includes/short_pagination.haml"          
  
  .flex-grow.overflow-y-auto.shadow.rounded-b-lg
    -if has_messages
      %table.list.object-list.lined.scrolled{class: '{% if org_perms.msgs.msg_update or org_perms.msgs.broadcast_send %}selectable{% endif %}'}
        %tbody
          -for object in object_list
            %tr.sms.object-row(
                id='id-row-{{object.id}}' 
                data-object-id='{{ object.id }}'
                data-sender-id='{{object.contact.id}}' 
                data-sender-uuid='{{object.contact.uuid}}' 
                onclick='handleRowClicked(event)' 
                href="{% url 'contacts.contact_read' object.contact.uuid %}")

              -if actions
                - if org_perms.msgs.msg_update or org_perms.msgs.broadcast_send
                  %td.checkbox.sms.object-row-check(onclick="checkInner(event);")
                    %temba-checkbox{onclick:"handleRowSelection(this)"}
              %td.whitespace-nowrap
                {{ object.contact|name_or_urn:user_org|truncatechars:20 }}
              %td.w-full
                .flex.flex-wrap.flex-end.items-center.justify-end
                  .flex-grow.inline
                    {% get_value object 'text' %}
                  .labels.flex.items-center.flex-wrap
                    
                    -if 'label' in actions
                      -for label in object.labels.all
                        %a(href="{% url 'msgs.msg_filter' label.uuid %}" onclick="goto(event, this)")
                          %temba-label.mx-1.my-1(data-id='{{label.id}}' icon="label" clickable)
                            {{label.name}}
                    -if object.flow
                      %a(href="{% url 'flows.flow_editor' object.flow.uuid %}" onclick="goto(event, this)")
                        %temba-label.mx-1.my-1(icon="flow" primary clickable)
                          {{object.flow.name}}
         

                -if object.attachments
                  .value-attachments{ style:"margin-top: 5px" }
                    - for attachment in object.attachments
                      {% attachment_button attachment %}

              %td
                .flex.w-full.items-center.justify-end.pr-4
                  .time.whitespace-nowrap
                    -block message_time
                      %temba-date(value="{{object.created_on.isoformat}}" display="timedate")

                  {% channel_log_link object %}

          -if not object_list
            %tr.empty_list
              %td{ colspan:'99' }
                -trans "No messages"
    -else
      -include "msgs/empty_include.html"

-block extra-script
  {{ block.super }}
  :javascript

    function handleRowClicked(event) {
      if (event.target.tagName == "TEMBA-CHECKBOX") {
        return;
      }

      var row = event.target.closest("tr");
      var uuid = row.getAttribute("data-sender-uuid");

      goto(event, row);
    }

    {% if org_perms.msgs.msg_update %}

    function onDeleteClicked(){
        var deleteConfirmation = document.querySelector("#delete-confirmation");
        deleteConfirmation.classList.remove("hide");
        deleteConfirmation.open = true;

        deleteConfirmation.addEventListener("temba-button-clicked", function(event){
          if (!event.detail.button.secondary) {
            runActionOnObjectRows("delete", wireTableListeners);
          }
          deleteConfirmation.open = false;
        });
      }

    function handleCreateLabelModalLoaded(event) {
      window.lastChecked = getCheckedIds();
      var body = event.detail.body;
      body.querySelector("#id_messages").value = window.lastChecked.join();
    }

    function handleCreateLabelModalSubmitted(event) {
      refresh(function() { recheckIds(); }, true);
      if (refreshMenu) {
        refreshMenu();
      }
    }

    function handleSendMessageClicked() {
      var sendEndpoint = "{% url 'msgs.broadcast_send' %}";
      var sendModal = document.querySelector("#send-message-modal");
      var msgIds = getCheckedIds();
      if (msgIds.length > 0) {
        sendModal.setAttribute("endpoint", sendEndpoint + '?m=' + msgIds);
      } else {
        sendModal.setAttribute("endpoint", sendEndpoint);
      }
    }
    {% endif %}

    function handleAddLabelClicked() {
      document.getElementById("create-label-modal").open = true;
    }
