-extends "smartmin/list.html"
-load smartmin i18n contacts compress

-block page-header

-block page-title
  {{ title }}

-block extra-style
  {{block.super}}
  :css

    .page-content {
      margin: 0;
      padding: 0;
    }

    .page-content > div {
      padding: 0;
    }

    .page-content > div > .mt-6 {
      margin: 0;
    }

    .page-content .ticket-list {
      background: transparent;
      border: none;
      margin-top: 0;
      margin-right: 1em;
      flex-basis: 20%;
      padding-bottom: 0;
    }

    .page-content .page {
      overflow: hidden;
    }

    .page-content temba-tabs {
      margin-bottom: 0;
    }

    .page-content .ticket-ui {
      margin-bottom: -60px !important;
      padding-bottom: 60px !important;
    }


    temba-select[name='ticket-status'] {
      margin-top: 0em !important;
    }

    .spa-footer {
      
    }
    
    temba-contact-tickets {
      margin-bottom: -0.5em;
    }

    .empty {
      position: absolute;
      opacity: 0;
      padding: 3px 40px;
      pointer-events: none;
    }

    .empty h2 {
      font-size: 36px;
      margin-top: 16px;
    }

    .popper {
      font-size: 48px;
      display: inline;
    }

    .ticket-list {
      max-width: 460px;
      flex-basis: 40%; 
      flex-grow: 0; 
      flex-shrink: 0;
      transition: all 200ms ease-in;
    }

    temba-menu {
      height: 100%;
    }

    .add-note, .assign-ticket {
      --header-bg: rgb(255,249,194);
      --header-text: #555;
      --textarea-height: 5em;
    }

    @container (max-width: 540px) {
      .ticket-list {
        flex-basis: 1em;
        flex-shrink: 1;
        max-width: inherit;
        margin-bottom: 0.75em;
        padding-bottom: 1em;
        margin-right: -2em;
        padding-right: 2em;
      
      }

      .ticket-ui {
        flex-direction: column;
      }

      temba-ticket-list {
        max-height:7em;
      }

      temba-contact-tickets {
        flex-grow: 1;
        flex-shrink: 1;
      }

      temba-contact-name-fetch {
        display: none;
      }

      .chat-pane {
        margin-left: 0;
        flex-grow: 2;
        border: solid 0px red;
        height: 100%;
      }

      .menu-flex {
        flex-direction: row-reverse;
      }
    }

-block extra-script
  {{ block.super }}
    
  :javascript
    // current state
    var folder = '{{folder}}';
    var status = '{{status}}';
    var ticketUUID = '{{uuid}}';
    var initialTicket = '{{uuid}}';
    var focusNext;
    var messageSent;

    function handleMessageSent(evt) {
      var ticket = evt.detail.msg.ticket;
      if (ticket) {
        // auto assign tickets when a message is sent
        var contactTickets = document.querySelector("temba-contact-tickets");
        var assigned = contactTickets.handleTicketAssignment(ticket, "{{user.email}}");
        
        // if we performed assignment, track our sent message
        if (assigned) {
          messageSent = true;
        }
      }
    }

    function handleTicketsMenuChanged(menuItem) {
      var statusSelect = document.querySelector('temba-select[name="ticket-status"]');
      ticketUUID = null;
      focusNext = null;
      if (folder !== menuItem.id) {
        document.title = menuItem.name;
        // whenever our menu changes, reset filter
        if (statusSelect) {
          statusSelect.setValue("open");
          status = "open";
          folder = menuItem.id;
          updateTicketList();
        }
      }                    
    }

    function handleFlowStarted(event) {

      var name = document.querySelector("temba-contact-name-fetch");
      name.refresh();

      // give our flow a chance to start
      window.setTimeout(function(){
        // refresh the main menu
        refreshMenu();
  
        // grab our latest chat
        var chat = document.querySelector("temba-contact-chat");
        chat.refresh();
  
        // refresh our content menu too
        var contentMenu = document.querySelector("temba-content-menu");
        contentMenu.refresh();
      }, 2000);

    }

    function updateTicketList() {
      var tickets = document.querySelector("temba-ticket-list");
      var contactTickets = document.querySelector("temba-contact-tickets");
      var chat = document.querySelector("temba-contact-chat");

      // if we have auto selecting, dont clear the chat
      var ticketsEndpoint = `/ticket/folder/${folder}/${status}/${initialTicket || ''}`;
      if (ticketsEndpoint != tickets.endpoint) {
        if (!tickets.nextSelection) {
          chat.contact = null;
        }

        tickets.setEndpoint(ticketsEndpoint, focusNext);

        // clear our ticket filter note if we have one
        tickets.innerHTML = '';
        focusNext = null;
        ticketUUID = null;
        initialTicket = null;
      }
    }

    function handleStatusFilterChanged(e) {
      ticketUUID = null;
      focusNext = null;
      status = event.target.values[0].value
      updateTicketList();
    }

    function clearFilter() {
      ticketUUID = null;
      initialTicket = null;
      updateTicketList();
    }

    function handleContactChanged(event) {
      messageSent = false;
      var contact = event.target.getSelection();

      var contactHeader = document.querySelector("temba-contact-name-fetch");
      var contactTickets = document.querySelector("temba-contact-tickets");
      var chat = document.querySelector("temba-contact-chat");
      var empty = document.querySelector(".empty");

      var fields = document.querySelectorAll("temba-contact-fields");
      var tabs = document.querySelector("temba-tabs");

      if (contact) {
        chat.contact = contact.uuid;
        chat.currentTicket = contact.ticket;

        contactTickets.ticket = contact.ticket.uuid;
        contactTickets.contact = contact.uuid;
        contactHeader.contact = contact.uuid;
        tabs.classList.remove("hidden");

        fields.forEach(function(contactFields) {
          contactFields.contact = contact.uuid;
        });

        var filterNote = document.querySelector(".filter-note");
        if (filterNote) {
          filterNote.classList.remove("hidden");
        }

        if (contact) {
          ticketUUID = contact.ticket.uuid;
        } else {
          ticketUUID = null;
        }

        chat.style.opacity = '1';
        chat.refresh();
        empty.style.opacity = '0';

      } else {
        tabs.classList.add("hidden");
        chat.style.opacity = '0';    
        empty.style.opacity = '1';
        chat.contact = null;
        chat.currentTicket = null;
        chat.currentContact = null;
        contactTickets.contact = null;
        contactTickets.ticket = null;
        contactHeader.contact = null;
      }
      
      updateTicketList();
      
      var path = `${folder}/${status}/${ticketUUID || ''}`;
      var show = `/ticket/${path}`;

      if (!show.endsWith("/")) {
        show += "/";
      }

      var tab = document.querySelector("temba-tabs").index;
      show += "?tab=" + tab;

      var contentMenu = document.querySelector("temba-content-menu");
      contentMenu.endpoint = show;

      window.history.replaceState({ url: show, show: show } ,"", show);
      
    }

    function handleNameClicked() {
      {%if org_perms.contacts.contact_read%}
        var chat = document.querySelector("temba-contact-chat");
        if (chat.contact) {
          var url = "/contact/read/" + chat.contact + "/";
          if (typeof gotoURL !== 'undefined') {
            gotoURL(url);
          } else {
            document.location.href = url;
          }
        }
      {%endif%}
    }

    function handleFieldSearch(evt) {
      var url = "/contact/?search=" + encodeURIComponent(evt.detail.key) + "+%3D+" + encodeURIComponent("\"" + evt.detail.value + "\"")
      if (typeof fetchURL !== 'undefined') {
        fetchURL(url)
      } else {
        document.location.href = url;
      }
    }

    function handleContactRefreshed(evt) {
      var contact = evt.detail.data;
      var tabs = document.querySelector("temba-tabs");

      // update our set field count
      var fields = Object.keys(contact.fields).filter(function (key) {
        return !!contact.fields[key]
      });

      var fieldTab = tabs.getTab(1);
      fieldTab.count = fields.length;

      // render our tabs
      tabs.requestUpdate();
    }
    
    function handleTicketsRefreshed(event) {
      refreshMenu();
    }

    function removeTicket(uuid) {
      var tickets = document.querySelector("temba-ticket-list");
      var chat = document.querySelector("temba-contact-chat");

      chat.contactUUID = null;
      chat.currentTicket = null;
      chat.currentContact = null;
      tickets.removeItem(uuid);
    }
    
    function handleTicketAssigned() {
      var contactTickets = document.querySelector("temba-contact-tickets");
      contactTickets.refresh();
      var chat = document.querySelector("temba-contact-chat");
      chat.refresh();
    }

    function handleNoteAdded() {
      var chat = document.querySelector("temba-contact-chat");
      chat.refresh();
    }

    function handleTicketUpdated(event) {
      if (event.detail.data) {
        var ticket = event.detail.data[0];

        if (ticket && event.detail.previous && ticket.uuid == event.detail.previous[0].uuid) {
          var previous = event.detail.previous[0];
          var menu = document.querySelector('temba-menu');
          var statusSelect = document.querySelector('temba-select[name="ticket-status"]');
          var tickets = document.querySelector("temba-ticket-list");
          var contactTickets = document.querySelector("temba-contact-tickets");
          var chat = document.querySelector("temba-contact-chat");

          // current agent took a ticket
          if (messageSent && ticket.assignee && ticket.assignee.email == '{{request.user.email}}') {
            if (folder == 'unassigned') {
              focusNext = ticket.uuid;
              folder = 'mine';
              menu.setFocusedItem('ticket/mine');
              updateTicketList();
            }
            messageSent = false;
          } else if (ticket.assignee && !previous.assignee && folder == 'unassigned') {
            removeTicket(ticket.uuid);
          }
          // unassigning an assigned ticket
          else if ((!ticket.assignee || ticket.assignee.email != '{{request.user.email}}') && folder == "mine" && previous.assignee) {
            removeTicket(ticket.uuid);
          }
    
          // ticket was reopened
          else if (ticket.status == "open" && previous.status != "open") {
            chat.contactUUID = null;
            chat.currentTicket = null;
            chat.currentContact = null;
            contactTickets.ticket = null;
            contactTickets.contact = null;
            focusNext = ticket.uuid;
            statusSelect.setSelection("open");
          } 
          // ticket was closed
          else if (ticket.status == "closed" && previous.status != "closed") {
            removeTicket(ticket.uuid);
          }

          tickets.refresh();
          chat.refresh();
          refreshMenu();
        }
      }
    }

    function handleTabChanged() {
      var tab = document.querySelector("temba-tabs").index;
      var url = window.location.pathname + "?tab=" + tab;
      window.history.replaceState({ url:url, show: url }, "", "?tab=" + tab);
    }


-block spa-title
  #title-text
    {{title}}

-block content
  .flex.flex-col.overflow-y-hidden.overflow-x-hidden.rounded-b-lg.flex-grow.-m-5.p-5
    .page.flex-grow.flex.flex-col.min-h-0
      .flex.ticket-ui(style="position:relative;z-index:0;margin:0;padding:0;height:100%")
        .ticket-list.flex.flex-col.m-4.pt-4.mr-2
          %temba-select.mb-2(name="ticket-status" onchange="handleStatusFilterChanged(event)" value="{{status}}")
            %temba-option(name="Open" value="open" icon="tickets_open")
            %temba-option(name="Closed" value="closed" icon="tickets_closed")

          .flex.flex-grow(style="max-height:100%;")
            -if uuid
              %temba-ticket-list.flex-grow(agent="{{request.user.email}}" endpoint="{% url 'tickets.ticket_folder' folder status uuid %}" -temba-refreshed="handleTicketsRefreshed" onchange="handleContactChanged(event)")
                .filter-note.m-2.hidden(style="text-align:center")
                  .linked(onclick="clearFilter()")
                    -trans "See more tickets"
            -else
              %temba-ticket-list.flex-grow(nextselection="{{nextUUID}}" agent="{{request.user.email}}" endpoint="{% url 'tickets.ticket_folder' folder status %}" -temba-refreshed="handleTicketsRefreshed" onchange="handleContactChanged(event)")

        .chat-pane.flex-grow.flex-col.flex.ml-4
          .empty
            -if has_tickets
              %h2
                .popper
                  🎉

                -blocktrans trimmed
                  All done!
              .mt-4
                -blocktrans trimmed
                  Nice work, there aren't any more tickets here that need your attention.

            -else
              %h2
                -blocktrans trimmed
                  Tickets

              .mt-6
                -blocktrans with name=brand.name trimmed
                  {{name}} Tickets makes it easy to chat directly with your contacts.

              .mt-4
                -blocktrans trimmed
                  Sometimes an automated chatbot isn't enough. When your contacts need to chat with a real person, you can use the
                  Open Ticket action to open a new ticket.


          .flex.flex-col.menu-flex
            .flex
              %temba-contact-name-fetch.text-2xl.mb-4(-temba-refreshed="handleContactRefreshed" onclick="handleNameClicked()" class="{%if org_perms.contacts.contact_read%}clickable{%endif%}")
              .flex-grow
              -include "spa_page_menu.haml"
            
            %temba-contact-tickets.mb-1(agent="{{request.user.email}}" -temba-refreshed="handleTicketUpdated" expandable="true")

          %temba-tabs.flex-grow(-temba-context-changed="handleTabChanged" index="{{request.GET.tab}}" collapses="true")
            %temba-tab(icon="message" name='{{_("Chat")|escapejs}}')
              .flex.flex-grow.flex-col.overflow-y-auto(style="border-top-right-radius: var(--curvature);")
                %temba-contact-chat(agent="{{request.user.email}}" monitor="true" -temba-message-sent="handleMessageSent")

            %temba-tab(icon="fields" name='{{_("Fields")|escapejs}}')
              .flex.flex-grow.flex-col.p-4.overflow-y-auto(style="border-top-right-radius: var(--curvature);")

                <temba-contact-fields class="featured-fields pb-1" timezone="{{object.org.timezone}}" featured="true" -temba-button-clicked="handleFieldSearch" {%if not org_perms.contacts.contact_update%}disabled{%endif%}></temba-contact-fields>
                <temba-contact-fields class="all-fields" timezone="{{object.org.timezone}}" -temba-button-clicked="handleFieldSearch" {%if not org_perms.contacts.contact_update%}disabled{%endif%}>
                  .no-fields.p-16.text-center(slot="empty")
                    .text-xl.mb-4
                      -trans "No Fields"        
                </temba-contact-fields>
            
        






